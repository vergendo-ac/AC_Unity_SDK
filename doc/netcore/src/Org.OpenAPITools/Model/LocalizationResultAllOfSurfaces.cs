/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocalizationResultAllOfSurfaces
    /// </summary>
    [DataContract]
    public partial class LocalizationResultAllOfSurfaces :  IEquatable<LocalizationResultAllOfSurfaces>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationResultAllOfSurfaces" /> class.
        /// </summary>
        /// <param name="frame">frame.</param>
        /// <param name="pose">pose.</param>
        public LocalizationResultAllOfSurfaces(List<List<float>> frame = default(List<List<float>>), Model3DPose pose = default(Model3DPose))
        {
            this.Frame = frame;
            this.Pose = pose;
        }
        
        /// <summary>
        /// Gets or Sets Frame
        /// </summary>
        [DataMember(Name="frame", EmitDefaultValue=false)]
        public List<List<float>> Frame { get; set; }

        /// <summary>
        /// Gets or Sets Pose
        /// </summary>
        [DataMember(Name="pose", EmitDefaultValue=false)]
        public Model3DPose Pose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizationResultAllOfSurfaces {\n");
            sb.Append("  Frame: ").Append(Frame).Append("\n");
            sb.Append("  Pose: ").Append(Pose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizationResultAllOfSurfaces);
        }

        /// <summary>
        /// Returns true if LocalizationResultAllOfSurfaces instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizationResultAllOfSurfaces to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizationResultAllOfSurfaces input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Frame == input.Frame ||
                    this.Frame != null &&
                    input.Frame != null &&
                    this.Frame.SequenceEqual(input.Frame)
                ) && 
                (
                    this.Pose == input.Pose ||
                    (this.Pose != null &&
                    this.Pose.Equals(input.Pose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Frame != null)
                    hashCode = hashCode * 59 + this.Frame.GetHashCode();
                if (this.Pose != null)
                    hashCode = hashCode * 59 + this.Pose.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

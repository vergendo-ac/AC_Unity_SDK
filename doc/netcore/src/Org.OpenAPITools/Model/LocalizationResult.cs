/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocalizationResult
    /// </summary>
    [DataContract]
    public partial class LocalizationResult :  IEquatable<LocalizationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalizationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationResult" /> class.
        /// </summary>
        /// <param name="camera">camera (required).</param>
        /// <param name="objectsInfo">objectsInfo.</param>
        /// <param name="sceneId">sceneId (required).</param>
        /// <param name="scene">scene.</param>
        /// <param name="surfaces">surfaces (required).</param>
        /// <param name="status">status (required).</param>
        public LocalizationResult(Model3DPose camera = default(Model3DPose), List<Object> objectsInfo = default(List<Object>), string sceneId = default(string), List<LocalizationResultAllOfScene> scene = default(List<LocalizationResultAllOfScene>), List<LocalizationResultAllOfSurfaces> surfaces = default(List<LocalizationResultAllOfSurfaces>), StatusStatus status = default(StatusStatus))
        {
            // to ensure "camera" is required (not null)
            this.Camera = camera ?? throw new ArgumentNullException("camera is a required property for LocalizationResult and cannot be null");
            // to ensure "sceneId" is required (not null)
            this.SceneId = sceneId ?? throw new ArgumentNullException("sceneId is a required property for LocalizationResult and cannot be null");
            // to ensure "surfaces" is required (not null)
            this.Surfaces = surfaces ?? throw new ArgumentNullException("surfaces is a required property for LocalizationResult and cannot be null");
            // to ensure "status" is required (not null)
            this.Status = status ?? throw new ArgumentNullException("status is a required property for LocalizationResult and cannot be null");
            this.ObjectsInfo = objectsInfo;
            this.Scene = scene;
        }
        
        /// <summary>
        /// Gets or Sets Camera
        /// </summary>
        [DataMember(Name="camera", EmitDefaultValue=false)]
        public Model3DPose Camera { get; set; }

        /// <summary>
        /// Gets or Sets ObjectsInfo
        /// </summary>
        [DataMember(Name="objects_info", EmitDefaultValue=false)]
        public List<Object> ObjectsInfo { get; set; }

        /// <summary>
        /// Gets or Sets SceneId
        /// </summary>
        [DataMember(Name="scene_id", EmitDefaultValue=false)]
        public string SceneId { get; set; }

        /// <summary>
        /// Gets or Sets Scene
        /// </summary>
        [DataMember(Name="scene", EmitDefaultValue=false)]
        public List<LocalizationResultAllOfScene> Scene { get; set; }

        /// <summary>
        /// Gets or Sets Surfaces
        /// </summary>
        [DataMember(Name="surfaces", EmitDefaultValue=false)]
        public List<LocalizationResultAllOfSurfaces> Surfaces { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizationResult {\n");
            sb.Append("  Camera: ").Append(Camera).Append("\n");
            sb.Append("  ObjectsInfo: ").Append(ObjectsInfo).Append("\n");
            sb.Append("  SceneId: ").Append(SceneId).Append("\n");
            sb.Append("  Scene: ").Append(Scene).Append("\n");
            sb.Append("  Surfaces: ").Append(Surfaces).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizationResult);
        }

        /// <summary>
        /// Returns true if LocalizationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Camera == input.Camera ||
                    (this.Camera != null &&
                    this.Camera.Equals(input.Camera))
                ) && 
                (
                    this.ObjectsInfo == input.ObjectsInfo ||
                    this.ObjectsInfo != null &&
                    input.ObjectsInfo != null &&
                    this.ObjectsInfo.SequenceEqual(input.ObjectsInfo)
                ) && 
                (
                    this.SceneId == input.SceneId ||
                    (this.SceneId != null &&
                    this.SceneId.Equals(input.SceneId))
                ) && 
                (
                    this.Scene == input.Scene ||
                    this.Scene != null &&
                    input.Scene != null &&
                    this.Scene.SequenceEqual(input.Scene)
                ) && 
                (
                    this.Surfaces == input.Surfaces ||
                    this.Surfaces != null &&
                    input.Surfaces != null &&
                    this.Surfaces.SequenceEqual(input.Surfaces)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Camera != null)
                    hashCode = hashCode * 59 + this.Camera.GetHashCode();
                if (this.ObjectsInfo != null)
                    hashCode = hashCode * 59 + this.ObjectsInfo.GetHashCode();
                if (this.SceneId != null)
                    hashCode = hashCode * 59 + this.SceneId.GetHashCode();
                if (this.Scene != null)
                    hashCode = hashCode * 59 + this.Scene.GetHashCode();
                if (this.Surfaces != null)
                    hashCode = hashCode * 59 + this.Surfaces.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

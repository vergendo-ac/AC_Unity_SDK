/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocalizationResultAllOfScene
    /// </summary>
    [DataContract]
    public partial class LocalizationResultAllOfScene :  IEquatable<LocalizationResultAllOfScene>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationResultAllOfScene" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalizationResultAllOfScene() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationResultAllOfScene" /> class.
        /// </summary>
        /// <param name="node">node (required).</param>
        public LocalizationResultAllOfScene(Model3DSceneNode node = default(Model3DSceneNode))
        {
            // to ensure "node" is required (not null)
            this.Node = node ?? throw new ArgumentNullException("node is a required property for LocalizationResultAllOfScene and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="node", EmitDefaultValue=false)]
        public Model3DSceneNode Node { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizationResultAllOfScene {\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizationResultAllOfScene);
        }

        /// <summary>
        /// Returns true if LocalizationResultAllOfScene instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizationResultAllOfScene to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizationResultAllOfScene input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

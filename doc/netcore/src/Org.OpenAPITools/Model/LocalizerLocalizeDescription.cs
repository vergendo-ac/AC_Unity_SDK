/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocalizerLocalizeDescription
    /// </summary>
    [DataContract]
    public partial class LocalizerLocalizeDescription :  IEquatable<LocalizerLocalizeDescription>, IValidatableObject
    {
        /// <summary>
        /// Clockwise camera rotation
        /// </summary>
        /// <value>Clockwise camera rotation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RotationEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_90 for value: 90
            /// </summary>
            NUMBER_90 = 90,

            /// <summary>
            /// Enum NUMBER_180 for value: 180
            /// </summary>
            NUMBER_180 = 180,

            /// <summary>
            /// Enum NUMBER_270 for value: 270
            /// </summary>
            NUMBER_270 = 270

        }

        /// <summary>
        /// Clockwise camera rotation
        /// </summary>
        /// <value>Clockwise camera rotation</value>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public RotationEnum? Rotation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizerLocalizeDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalizerLocalizeDescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizerLocalizeDescription" /> class.
        /// </summary>
        /// <param name="gps">gps (required).</param>
        /// <param name="focalLengthIn35mmFilm">focalLengthIn35mmFilm.</param>
        /// <param name="mirrored">mirrored (default to false).</param>
        /// <param name="rotation">Clockwise camera rotation (default to RotationEnum.NUMBER_0).</param>
        public LocalizerLocalizeDescription(LocalizerLocalizeDescriptionGps gps = default(LocalizerLocalizeDescriptionGps), int focalLengthIn35mmFilm = default(int), bool mirrored = false, RotationEnum? rotation = RotationEnum.NUMBER_0)
        {
            // to ensure "gps" is required (not null)
            this.Gps = gps ?? throw new ArgumentNullException("gps is a required property for LocalizerLocalizeDescription and cannot be null");
            this.FocalLengthIn35mmFilm = focalLengthIn35mmFilm;
            this.Mirrored = mirrored;
            this.Rotation = rotation;
        }
        
        /// <summary>
        /// Gets or Sets Gps
        /// </summary>
        [DataMember(Name="gps", EmitDefaultValue=false)]
        public LocalizerLocalizeDescriptionGps Gps { get; set; }

        /// <summary>
        /// Gets or Sets FocalLengthIn35mmFilm
        /// </summary>
        [DataMember(Name="focal_length_in_35mm_film", EmitDefaultValue=false)]
        public int FocalLengthIn35mmFilm { get; set; }

        /// <summary>
        /// Gets or Sets Mirrored
        /// </summary>
        [DataMember(Name="mirrored", EmitDefaultValue=false)]
        public bool Mirrored { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizerLocalizeDescription {\n");
            sb.Append("  Gps: ").Append(Gps).Append("\n");
            sb.Append("  FocalLengthIn35mmFilm: ").Append(FocalLengthIn35mmFilm).Append("\n");
            sb.Append("  Mirrored: ").Append(Mirrored).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizerLocalizeDescription);
        }

        /// <summary>
        /// Returns true if LocalizerLocalizeDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizerLocalizeDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizerLocalizeDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gps == input.Gps ||
                    (this.Gps != null &&
                    this.Gps.Equals(input.Gps))
                ) && 
                (
                    this.FocalLengthIn35mmFilm == input.FocalLengthIn35mmFilm ||
                    this.FocalLengthIn35mmFilm.Equals(input.FocalLengthIn35mmFilm)
                ) && 
                (
                    this.Mirrored == input.Mirrored ||
                    this.Mirrored.Equals(input.Mirrored)
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    this.Rotation.Equals(input.Rotation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gps != null)
                    hashCode = hashCode * 59 + this.Gps.GetHashCode();
                hashCode = hashCode * 59 + this.FocalLengthIn35mmFilm.GetHashCode();
                hashCode = hashCode * 59 + this.Mirrored.GetHashCode();
                hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

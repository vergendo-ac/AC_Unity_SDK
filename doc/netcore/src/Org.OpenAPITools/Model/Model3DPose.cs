/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Model3DPose
    /// </summary>
    [DataContract]
    public partial class Model3DPose :  IEquatable<Model3DPose>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Model3DPose" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Model3DPose() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Model3DPose" /> class.
        /// </summary>
        /// <param name="position">position (required).</param>
        /// <param name="orientation">orientation (required).</param>
        public Model3DPose(List<float> position = default(List<float>), List<float> orientation = default(List<float>))
        {
            // to ensure "position" is required (not null)
            this.Position = position ?? throw new ArgumentNullException("position is a required property for Model3DPose and cannot be null");
            // to ensure "orientation" is required (not null)
            this.Orientation = orientation ?? throw new ArgumentNullException("orientation is a required property for Model3DPose and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public List<float> Position { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name="orientation", EmitDefaultValue=false)]
        public List<float> Orientation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model3DPose {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Model3DPose);
        }

        /// <summary>
        /// Returns true if Model3DPose instances are equal
        /// </summary>
        /// <param name="input">Instance of Model3DPose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model3DPose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Position == input.Position ||
                    this.Position != null &&
                    input.Position != null &&
                    this.Position.SequenceEqual(input.Position)
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    this.Orientation != null &&
                    input.Orientation != null &&
                    this.Orientation.SequenceEqual(input.Orientation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Orientation != null)
                    hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

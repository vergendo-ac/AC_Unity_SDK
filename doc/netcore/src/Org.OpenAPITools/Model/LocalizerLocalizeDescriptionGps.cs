/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.1.2
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocalizerLocalizeDescriptionGps
    /// </summary>
    [DataContract]
    public partial class LocalizerLocalizeDescriptionGps :  IEquatable<LocalizerLocalizeDescriptionGps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizerLocalizeDescriptionGps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalizerLocalizeDescriptionGps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizerLocalizeDescriptionGps" /> class.
        /// </summary>
        /// <param name="latitude">latitude (required).</param>
        /// <param name="longitude">longitude (required).</param>
        /// <param name="altitude">altitude.</param>
        /// <param name="hdop">hdop.</param>
        public LocalizerLocalizeDescriptionGps(float latitude = default(float), float longitude = default(float), float altitude = default(float), float hdop = default(float))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Altitude = altitude;
            this.Hdop = hdop;
        }
        
        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public float Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public float Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Altitude
        /// </summary>
        [DataMember(Name="altitude", EmitDefaultValue=false)]
        public float Altitude { get; set; }

        /// <summary>
        /// Gets or Sets Hdop
        /// </summary>
        [DataMember(Name="hdop", EmitDefaultValue=false)]
        public float Hdop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizerLocalizeDescriptionGps {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Altitude: ").Append(Altitude).Append("\n");
            sb.Append("  Hdop: ").Append(Hdop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizerLocalizeDescriptionGps);
        }

        /// <summary>
        /// Returns true if LocalizerLocalizeDescriptionGps instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizerLocalizeDescriptionGps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizerLocalizeDescriptionGps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Altitude == input.Altitude ||
                    this.Altitude.Equals(input.Altitude)
                ) && 
                (
                    this.Hdop == input.Hdop ||
                    this.Hdop.Equals(input.Hdop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                hashCode = hashCode * 59 + this.Altitude.GetHashCode();
                hashCode = hashCode * 59 + this.Hdop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

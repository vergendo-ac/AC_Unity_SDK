/**
* Augmented City API
* ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
*
* The version of the OpenAPI document: 1.0.0
* Contact: support@vergendo.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.InlineObject3
import org.openapitools.client.models.InlineResponse200
import org.openapitools.client.models.OneOfLessThanObjectCommaObjectCommaObjectGreaterThan
import org.openapitools.client.models.OneOfLessThanObjectCommaObjectGreaterThan

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SeriesApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://developer.vergendo.com:5000/api")
        }
    }

    /**
    * Get series reconstruction status by task id
    * Get series reconstruction status by task id
    * @param accept  
    * @param taskId uuid. Several task ids could be specified 
    * @return kotlin.Array<OneOfLessThanObjectCommaObjectCommaObjectGreaterThan>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSeries(accept: kotlin.String, taskId: kotlin.Array<java.util.UUID>) : kotlin.Array<OneOfLessThanObjectCommaObjectCommaObjectGreaterThan> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("task_id", toMultiValue(taskId.toList(), "multi"))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/series",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<kotlin.Array<OneOfLessThanObjectCommaObjectCommaObjectGreaterThan>>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Array<OneOfLessThanObjectCommaObjectCommaObjectGreaterThan>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Add new series to server to make reconstruction
    * Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
    * @param accept  
    * @param notificationId Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)
    * @param inlineObject3  (optional)
    * @return InlineResponse200
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postSeries(accept: kotlin.String, notificationId: kotlin.Int?, inlineObject3: InlineObject3?) : InlineResponse200 {
        val localVariableBody: kotlin.Any? = inlineObject3
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (notificationId != null) {
                    put("notification_id", listOf(notificationId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/series",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<InlineResponse200>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse200
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Upload series images to server
    * Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
    * @param accept  
    * @param taskId uuid. Only one task_id could be specified 
    * @param file  
    * @return OneOfLessThanObjectCommaObjectGreaterThan
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putSeries(accept: kotlin.String, taskId: java.util.UUID, file: kotlin.Array<java.io.File>) : OneOfLessThanObjectCommaObjectGreaterThan {
        val localVariableBody: kotlin.Any? = mapOf("file" to file)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("task_id", listOf(taskId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data", "Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/series",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<OneOfLessThanObjectCommaObjectGreaterThan>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OneOfLessThanObjectCommaObjectGreaterThan
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

}

/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISeriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get series reconstruction status by task id
        /// </summary>
        /// <remarks>
        /// Get series reconstruction status by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>List&lt;OneOfobjectobjectobject&gt;</returns>
        List<OneOfobjectobjectobject> GetSeries (string accept, List<Guid> taskId);

        /// <summary>
        /// Get series reconstruction status by task id
        /// </summary>
        /// <remarks>
        /// Get series reconstruction status by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>ApiResponse of List&lt;OneOfobjectobjectobject&gt;</returns>
        ApiResponse<List<OneOfobjectobjectobject>> GetSeriesWithHttpInfo (string accept, List<Guid> taskId);
        /// <summary>
        /// Add new series to server to make reconstruction
        /// </summary>
        /// <remarks>
        /// Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PostSeries (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3));

        /// <summary>
        /// Add new series to server to make reconstruction
        /// </summary>
        /// <remarks>
        /// Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PostSeriesWithHttpInfo (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3));
        /// <summary>
        /// Upload series images to server
        /// </summary>
        /// <remarks>
        /// Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>OneOfobjectobject</returns>
        OneOfobjectobject PutSeries (string accept, Guid taskId, List<System.IO.Stream> file);

        /// <summary>
        /// Upload series images to server
        /// </summary>
        /// <remarks>
        /// Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>ApiResponse of OneOfobjectobject</returns>
        ApiResponse<OneOfobjectobject> PutSeriesWithHttpInfo (string accept, Guid taskId, List<System.IO.Stream> file);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISeriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get series reconstruction status by task id
        /// </summary>
        /// <remarks>
        /// Get series reconstruction status by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>Task of List&lt;OneOfobjectobjectobject&gt;</returns>
        System.Threading.Tasks.Task<List<OneOfobjectobjectobject>> GetSeriesAsync (string accept, List<Guid> taskId);

        /// <summary>
        /// Get series reconstruction status by task id
        /// </summary>
        /// <remarks>
        /// Get series reconstruction status by task id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>Task of ApiResponse (List&lt;OneOfobjectobjectobject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OneOfobjectobjectobject>>> GetSeriesAsyncWithHttpInfo (string accept, List<Guid> taskId);
        /// <summary>
        /// Add new series to server to make reconstruction
        /// </summary>
        /// <remarks>
        /// Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PostSeriesAsync (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3));

        /// <summary>
        /// Add new series to server to make reconstruction
        /// </summary>
        /// <remarks>
        /// Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostSeriesAsyncWithHttpInfo (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3));
        /// <summary>
        /// Upload series images to server
        /// </summary>
        /// <remarks>
        /// Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>Task of OneOfobjectobject</returns>
        System.Threading.Tasks.Task<OneOfobjectobject> PutSeriesAsync (string accept, Guid taskId, List<System.IO.Stream> file);

        /// <summary>
        /// Upload series images to server
        /// </summary>
        /// <remarks>
        /// Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>Task of ApiResponse (OneOfobjectobject)</returns>
        System.Threading.Tasks.Task<ApiResponse<OneOfobjectobject>> PutSeriesAsyncWithHttpInfo (string accept, Guid taskId, List<System.IO.Stream> file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISeriesApi : ISeriesApiSync, ISeriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SeriesApi : ISeriesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SeriesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SeriesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SeriesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SeriesApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get series reconstruction status by task id Get series reconstruction status by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>List&lt;OneOfobjectobjectobject&gt;</returns>
        public List<OneOfobjectobjectobject> GetSeries (string accept, List<Guid> taskId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<OneOfobjectobjectobject>> localVarResponse = GetSeriesWithHttpInfo(accept, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get series reconstruction status by task id Get series reconstruction status by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>ApiResponse of List&lt;OneOfobjectobjectobject&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<OneOfobjectobjectobject> > GetSeriesWithHttpInfo (string accept, List<Guid> taskId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling SeriesApi->GetSeries");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling SeriesApi->GetSeries");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "task_id", taskId));
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OneOfobjectobjectobject> >("/series", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSeries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get series reconstruction status by task id Get series reconstruction status by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>Task of List&lt;OneOfobjectobjectobject&gt;</returns>
        public async System.Threading.Tasks.Task<List<OneOfobjectobjectobject>> GetSeriesAsync (string accept, List<Guid> taskId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<OneOfobjectobjectobject>> localVarResponse = await GetSeriesAsyncWithHttpInfo(accept, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get series reconstruction status by task id Get series reconstruction status by task id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Several task ids could be specified</param>
        /// <returns>Task of ApiResponse (List&lt;OneOfobjectobjectobject&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OneOfobjectobjectobject>>> GetSeriesAsyncWithHttpInfo (string accept, List<Guid> taskId)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling SeriesApi->GetSeries");

            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling SeriesApi->GetSeries");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "task_id", taskId));
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OneOfobjectobjectobject>>("/series", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSeries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new series to server to make reconstruction Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PostSeries (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3))
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse200> localVarResponse = PostSeriesWithHttpInfo(accept, notificationId, inlineObject3);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new series to server to make reconstruction Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse200 > PostSeriesWithHttpInfo (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling SeriesApi->PostSeries");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (notificationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "notification_id", notificationId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = inlineObject3;


            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse200 >("/series", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSeries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new series to server to make reconstruction Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PostSeriesAsync (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3))
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse200> localVarResponse = await PostSeriesAsyncWithHttpInfo(accept, notificationId, inlineObject3);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new series to server to make reconstruction Add new series to server to make reconstruction asynchronously. Accept series description and wait images upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="notificationId">Firebase cloud message id. If specified the client will get push notification when series process is finished (optional)</param>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse200>> PostSeriesAsyncWithHttpInfo (string accept, int? notificationId = default(int?), InlineObject3 inlineObject3 = default(InlineObject3))
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling SeriesApi->PostSeries");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (notificationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "notification_id", notificationId));
            }
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.Data = inlineObject3;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse200>("/series", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSeries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload series images to server Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>OneOfobjectobject</returns>
        public OneOfobjectobject PutSeries (string accept, Guid taskId, List<System.IO.Stream> file)
        {
             Org.OpenAPITools.Client.ApiResponse<OneOfobjectobject> localVarResponse = PutSeriesWithHttpInfo(accept, taskId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload series images to server Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>ApiResponse of OneOfobjectobject</returns>
        public Org.OpenAPITools.Client.ApiResponse< OneOfobjectobject > PutSeriesWithHttpInfo (string accept, Guid taskId, List<System.IO.Stream> file)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling SeriesApi->PutSeries");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'file' when calling SeriesApi->PutSeries");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.FileParameters.Add("file", file);


            // make the HTTP request
            var localVarResponse = this.Client.Put< OneOfobjectobject >("/series", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSeries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload series images to server Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>Task of OneOfobjectobject</returns>
        public async System.Threading.Tasks.Task<OneOfobjectobject> PutSeriesAsync (string accept, Guid taskId, List<System.IO.Stream> file)
        {
             Org.OpenAPITools.Client.ApiResponse<OneOfobjectobject> localVarResponse = await PutSeriesAsyncWithHttpInfo(accept, taskId, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload series images to server Upload files to server at the series reconstruction. Send an empty request to notify a server that all images are uploaded. In that case the server will set files in a queue to be processed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="taskId">uuid. Only one task_id could be specified</param>
        /// <param name="file"></param>
        /// <returns>Task of ApiResponse (OneOfobjectobject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OneOfobjectobject>> PutSeriesAsyncWithHttpInfo (string accept, Guid taskId, List<System.IO.Stream> file)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling SeriesApi->PutSeries");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'file' when calling SeriesApi->PutSeries");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            localVarRequestOptions.FileParameters.Add("file", file);


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OneOfobjectobject>("/series", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutSeries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

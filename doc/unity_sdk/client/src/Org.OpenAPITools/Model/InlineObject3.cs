/* 
 * Augmented City API
 *
 * ## Description This is an API for the Augmented City platform ## Other resources For more information, please visit our website [https://www.augmented.city](https://www.augmented.city/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vergendo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject3
    /// </summary>
    [DataContract]
    public partial class InlineObject3 :  IEquatable<InlineObject3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        /// <param name="user">user (required).</param>
        /// <param name="device">device (required).</param>
        /// <param name="_client">_client (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="daytime">daytime (required).</param>
        /// <param name="passagesCount">passagesCount (required).</param>
        public InlineObject3(string user = default(string), string device = default(string), string _client = default(string), string name = default(string), string daytime = default(string), int passagesCount = default(int))
        {
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for InlineObject3 and cannot be null");
            // to ensure "device" is required (not null)
            this.Device = device ?? throw new ArgumentNullException("device is a required property for InlineObject3 and cannot be null");
            // to ensure "_client" is required (not null)
            this._Client = _client ?? throw new ArgumentNullException("_client is a required property for InlineObject3 and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for InlineObject3 and cannot be null");
            // to ensure "daytime" is required (not null)
            this.Daytime = daytime ?? throw new ArgumentNullException("daytime is a required property for InlineObject3 and cannot be null");
            this.PassagesCount = passagesCount;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public string Device { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name="client", EmitDefaultValue=false)]
        public string _Client { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Daytime
        /// </summary>
        [DataMember(Name="daytime", EmitDefaultValue=false)]
        public string Daytime { get; set; }

        /// <summary>
        /// Gets or Sets PassagesCount
        /// </summary>
        [DataMember(Name="passages_count", EmitDefaultValue=false)]
        public int PassagesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject3 {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Daytime: ").Append(Daytime).Append("\n");
            sb.Append("  PassagesCount: ").Append(PassagesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject3);
        }

        /// <summary>
        /// Returns true if InlineObject3 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject3 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Daytime == input.Daytime ||
                    (this.Daytime != null &&
                    this.Daytime.Equals(input.Daytime))
                ) && 
                (
                    this.PassagesCount == input.PassagesCount ||
                    this.PassagesCount.Equals(input.PassagesCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Daytime != null)
                    hashCode = hashCode * 59 + this.Daytime.GetHashCode();
                hashCode = hashCode * 59 + this.PassagesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
